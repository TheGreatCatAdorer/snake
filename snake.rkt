#lang racket/base
(define (grid edge)
  (build-string (* edge (add1 edge))
    (lambda (x) (if (equal? (modulo x (add1 edge)) edge) #\newline #\0))))
(define (direction-helper weights direction)
  (if (< direction 3)
    (if (<= (random) (car weights))
      direction
      (direction-helper (cdr weights) (add1 direction)))
    3))
(define (alter-grid edge grid-path pos val)
  (string-append
   (substring grid-path 0 (+ (car pos) (* (add1 edge) (cdr pos))))
   val
   (substring grid-path (+ 1 (car pos) (* (add1 edge) (cdr pos))))))
(define (universal-weights values) (make-vector 16 values))
(define default-weights (universal-weights (list 1/4 1/3 1/2)))
(define (snake edge weights)
  (let ((center (floor (/ edge 2))))
    (snake-helper (cons center center) edge (grid edge) weights 0)))
(define (snake-helper pos edge grid-path weights i)
  (if (< i 1000000)
    (let ((posc (+ (car pos) (* (add1 edge) (cdr pos))))
          (seeker (lambda (x? +? x y)
                    (if (and (or x? +? (> (cdr pos) 0)) (or x? (not +?) (< (cdr pos) (sub1 edge))) (or (not x?) (not +?) (< (car pos) (sub1 edge))) (or (not x?) +? (> (car pos) 0)))
                      (string->number (substring grid-path (+ x (car pos) (* (add1 edge) (+ y (cdr pos)))) (+ 1 x (car pos) (* (add1 edge) (+ y (cdr pos))))))
                      1))))
      (let ((up (seeker #f #f 0 -1))
            (down (seeker #f #t 0 1))
            (right (seeker #t #t 1 0))
            (left (seeker #t #f -1 0)))
        (let* ((movement (vector-ref weights (+ (* 8 up) (* 4 down) (* 2 right) left)))
               (direction (direction-helper movement 0))
               (pos1 (lambda (delta-x delta-y) (cons (+ (car pos) delta-x) (+ (cdr pos) delta-y))))
               (next (lambda (move pos2)
                       (if (equal? move 0)
                         (begin (string-set! grid-path posc #\1) (snake-helper pos2 edge grid-path weights (add1 i)))
                         ;(snake-helper pos edge grid-path weights (add1 i))
                         (begin (string-set! grid-path posc #\X) (display (list i pos grid-path)))
                         ;(cons i pos)
                         ))))
          (cond ((equal? direction 0) (next up (pos1 0 -1)))
                ((equal? direction 1) (next down (pos1 0 1)))
                ((equal? direction 2) (next right (pos1 1 0)))
                ((equal? direction 3) (next left (pos1 -1 0)))))))
    ;(cons i pos)))
    (begin (string-set! grid-path (+ (car pos) (* (add1 edge) (cdr pos))) #\X) (display (list i pos grid-path)))))
(snake 16 default-weights)
